
https://javascript.info/cookie#:~:text=samesite%3Dstrict%20(same%20as%20samesite,the%20cookie%20is%20not%20sent.

A refresh token is a credential that allows a client 
application to obtain a new access token without having to authenticate the user again. 
Refresh tokens are typically longer-lived than access tokens, and they are used to mitigate the risk of access tokens expiring or being compromised.

When a client application first authenticates a user, the authorization server will issue the client application an access token and a refresh token. 
The client application can then use the access token to access protected resources. 
When the access token expires, the client application can use the refresh token to obtain a new access token.

Refresh tokens are typically stored in the client application's local storage or database. 
The client application should take steps to protect the refresh token from unauthorized access.

Here are some of the risks associated with using refresh tokens
Refresh tokens can be stolen or compromised. 
    If a refresh token is stolen or compromised, an attacker could use it to obtain new access tokens. This could allow the attacker to access protected resources without authorization.
Refresh tokens can be used to perform replay attacks. 
    A replay attack is an attack where an attacker captures an authorized request and then replays it later. If an attacker captures a refresh token, they could replay it to obtain new access tokens.

It is important to take steps to protect refresh tokens from unauthorized access and to mitigate the risk of replay attacks.

Here are some tips on how to secure refresh tokens client side:
Store refresh tokens securely: 
    Refresh tokens should be stored in a secure location, such as a database or a cryptographically-secured key store. They should not be stored in clear text in the client application's local storage or cookies.
Use HTTPOnly cookies. 
    HTTPOnly cookies are not accessible by JavaScript, which makes them more secure. If you are storing refresh tokens in cookies, make sure they are HTTPOnly cookies.
Use SameSite=Strict cookies. 
    SameSite=Strict cookies cannot be sent by cross-origin requests. This can help mitigate the risk of cross-site request forgery (CSRF) attacks. If you are storing refresh tokens in cookies, make sure they are SameSite=Strict cookies.
Rotate refresh tokens regularly
    Refresh tokens should be rotated on a regular basis. This will help mitigate the risk of a refresh token being compromised.
Use a token blacklist
    A token blacklist is a list of known-compromised tokens. If a refresh token is added to the token blacklist, the client application should not accept it. This can help prevent attackers from using compromised refresh tokens to obtain new access tokens.
Use a token expiration policy
    Refresh tokens should expire after a certain period of time. This will help mitigate the risk of a refresh token being used after it has been compromised.