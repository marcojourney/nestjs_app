Priority
    1. AWS
    2. Google Cloud
    3. MongoDB
    4. Cache Server
    5. Elastic Search
    6. Microservice
1. Security
    a. Create entity to map with database[Done]
    b. Implementation authentication[Done]
    c. Implementation authorization
    d. Encryption and Hashing[Done]
    e. Check more deeply with JWT(Refresh Token, scope, Use a strong signing algorithm(RS256 or ES256), Use a long expiration time, Require re-authentication periodically)
    f. Oauth2

2. Dependency injection
    a. Modular
    b. Easier to test

3. Database
    a. Migration[Done]
    b. Seeder

4. Routing and guards
    a. Register guard to controller[Done]
    b. Register guard to any module
    c. Register guard to global, but except any module

5. Modules
    a. Providers: The providers that will be instantiated by the Nest injector and that may be shared at least across this module
    b. Controllers: The set of controllers defined in this module which have to be instantiated
    c. Imports: The list of imported modules that export the providers which are required in this module
    d. Exports: The subset of providers that are provided by this module and should be available in other modules which import this module. 
    You can use either the provider itself or just its token (provide value)
6. Middleware
    a. Guard

7. Testing[In Progress]
    a. Unit Test[70%]
    b. Integration Test
    c. E2E[In Progress]
    d. A/B testing

8. Debuging[Done]

9. Cloud Hosting
    a. AWS
    b. Google

10. Non-Relational Database
    a. MongoDB(https://doug-martin.github.io/nestjs-query/docs/persistence/mongoose/relations/)
    b. CouchDB
    c. Neo4j
    d. Cassandra
    e. HBase
    f. Amazon DynamoDB

11. Web Server
    a. NGINX

12. Logging
    a. Use server logging

13. Regular Expression

14. Proxy Server: is a server that acts as an intermediary between a client and a server. 
    When a client requests a resource from a server, the proxy server receives the request and forwards it to the server. 
    The server then sends a response back to the proxy server, which forwards the response to the client.
    Proxy servers can be configured to use a variety of protocols, including HTTP, HTTPS, FTP, and SMTP.
    Proxy servers can be used to filter traffic based on a variety of criteria, such as IP address, URL, and content.
    Proxy servers can be used to hide a client's IP address, which can be useful for privacy or bypassing censorship.
    Proxy servers can be used to load balance traffic across multiple servers, which can improve performance.
    Proxy servers can be used for a variety of purposes, including:
        Caching: Proxy servers can cache frequently accessed resources, which can improve performance.
        Security: Proxy servers can be used to filter traffic and protect clients from malicious websites.
        Anonymity: Proxy servers can be used to hide a client's IP address, which can be useful for privacy or bypassing censorship.
        Load balancing: Proxy servers can be used to distribute traffic across multiple servers, which can improve performance.
    a. Forward proxy server: are used to connect clients to servers.
    b. Reverse proxy server: Reverse proxy servers are used to connect servers to clients.

15. Git Advance
16. Cache Server
17. Elastic Search
18. Protect Attacker
19. Docker
20. Logging
21. WebSockets